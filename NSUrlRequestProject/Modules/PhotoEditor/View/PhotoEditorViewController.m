//
//  PhotoEditorViewController.m
//  NSUrlRequestProject
//
//  Created pockerhead on 18/04/2019.
//  Copyright Â© 2019 Alexey Levanov. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

#import "PhotoEditorViewController.h"
#import <UIKit/UIKit.h>

@interface PhotoEditorViewController () <PhotoEditorView>

@property (nonatomic, strong) UIImageView *filteredImage;
@property (nonatomic, strong) UIImage *filtered;
@property (nonatomic, strong) UIImage *secondFiltered;
@property (nonatomic, strong) UIImage *thirdFiltered;

@property (nonatomic, strong) CIContext *context;
@property (nonatomic, strong) UISlider *slider;
@property (nonatomic, strong) UISlider *secondSlider;
@property (nonatomic, strong) UISlider *thirdSlider;
@property (nonatomic, strong) CIFilter *maskFilter;
@property (nonatomic, strong) CIFilter *secondMaskFilter;
@property (nonatomic, strong) CIFilter *thirdMaskFilter;
@property (nonatomic, strong) dispatch_queue_t serialQueue;

@end

@implementation PhotoEditorViewController

- (instancetype)initWithImage:(UIImage *)image
{
    self = [super initWithNibName:nil bundle:nil];
    if (self) {
        _image = image;
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
//    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemStop target:self action:@selector(dismissSelf)];
    self.filteredImage = [UIImageView new];
    self.filteredImage.frame = self.view.bounds;
    self.filteredImage.contentMode = UIViewContentModeScaleAspectFit;
    self.filteredImage.image = self.image;
    self.filteredImage.clipsToBounds = YES;
    [self.view addSubview:self.filteredImage];
    self.view.backgroundColor = UIColor.whiteColor;
    self.context = [[CIContext alloc] initWithOptions:nil];
    self.slider = [UISlider new];
    [self.slider addTarget:self action:@selector(intensitySliderValueChanedWithSender:) forControlEvents:UIControlEventValueChanged];
    [self.view addSubview:self.slider];
    self.secondSlider = [UISlider new];
    [self.secondSlider addTarget:self action:@selector(intensitySecondSliderValueChanedWithSender:) forControlEvents:UIControlEventValueChanged];
    [self.view addSubview:self.secondSlider];
    self.thirdSlider = [UISlider new];
    [self.thirdSlider addTarget:self action:@selector(intensityThirdSliderValueChanedWithSender:) forControlEvents:UIControlEventValueChanged];
    [self.view addSubview:self.thirdSlider];
    [self createFilteredImagesAndClearSliders];
    
    
    self.serialQueue = dispatch_queue_create("serialQueue", NULL);
}

- (void)createFilteredImagesAndClearSliders
{
    self.slider.value = 0;
    self.secondSlider.value = 0;
    self.thirdSlider.value = 0;
    self.filtered = [self ciEdgesImageFromImage:self.image];
    self.secondFiltered = [self CIPhotoEffectInstantImageFromImage:self.image];
    self.thirdFiltered = [self CIPhotoEffectTransferImageFromImage:self.image];
//    self.maskFilter = [self createma]
}

- (void)setImage:(UIImage *)image
{
    _image = image;
    self.filteredImage.image = image;
    [self createFilteredImagesAndClearSliders];
}

- (void)viewDidLayoutSubviews
{
    self.filteredImage.frame = CGRectMake(0, self.view.safeAreaInsets.top, CGRectGetWidth(self.view.frame),  CGRectGetHeight(self.view.frame) - 240 - self.view.safeAreaInsets.bottom - self.view.safeAreaInsets.top);
    self.slider.frame = CGRectMake(16, CGRectGetMaxY(self.filteredImage.frame), CGRectGetWidth(self.view.frame) - 32, 80);
    self.secondSlider.frame = CGRectMake(16, CGRectGetMaxY(self.slider.frame), CGRectGetWidth(self.view.frame) - 32, 80);
    self.thirdSlider.frame = CGRectMake(16, CGRectGetMaxY(self.secondSlider.frame), CGRectGetWidth(self.view.frame) - 32, 80);
}

- (void)dismissSelf
{
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)intensitySliderValueChanedWithSender:(UISlider *)slider
{
    [self sumFilters];
}

- (void)intensitySecondSliderValueChanedWithSender:(UISlider *)slider
{
    [self sumFilters];
}

- (void)intensityThirdSliderValueChanedWithSender:(UISlider *)slider
{
    [self sumFilters];
}

- (void)sumFilters
{
    CGFloat firstSliderVal = self.slider.value;
    CGFloat secondSliderVal = self.secondSlider.value;
    CGFloat thirdSliderVal = self.thirdSlider.value;
//    dispatch_async(self.serialQueue, ^{
        @autoreleasepool {
            CIFilter *mask = [self createMaskFilterWithFilteredImage:self.filtered andOriginalImage:self.image];
            UIImage *firstFiltered = [self maskFilteredWithMask:mask intensity:firstSliderVal andBackgroundImage:self.image andFilteredImage:self.filtered];
            CIFilter *secondMask = [self createMaskFilterWithFilteredImage:self.secondFiltered andOriginalImage:self.image];
            UIImage *secondFiltered = [self maskFilteredWithMask:secondMask intensity:secondSliderVal andBackgroundImage:self.image andFilteredImage:self.secondFiltered];
            
            CIFilter *firstTwoSumMask = [self createMaskFilterWithFilteredImage:secondFiltered andOriginalImage:firstFiltered];
            UIImage *firstTwoSumFiltered = [self maskFilteredWithMask:firstTwoSumMask intensity:0.5 andBackgroundImage:firstFiltered andFilteredImage:secondFiltered];
            
            CIFilter *thirdMask = [self createMaskFilterWithFilteredImage:self.thirdFiltered andOriginalImage:self.image];
            UIImage *thirdFiltered = [self maskFilteredWithMask:thirdMask intensity:thirdSliderVal andBackgroundImage:self.image andFilteredImage:self.thirdFiltered];
            
            CIFilter *finalSumMask = [self createMaskFilterWithFilteredImage:firstTwoSumFiltered andOriginalImage:thirdFiltered];
            UIImage *finalSumFiltered = [self maskFilteredWithMask:finalSumMask intensity:0.5 andBackgroundImage:firstTwoSumFiltered andFilteredImage:thirdFiltered];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                self.filteredImage.image = finalSumFiltered;
            });
        }
//    });
}

- (UIImage *)ciEdgesImageFromImage:(UIImage *)image
{
    @autoreleasepool {
        UIImage *result;
        CIImage *raw = [[CIImage alloc] initWithImage:image];
        
        CIFilter *ciEdges = [CIFilter filterWithName:@"CIEdges"];
        [ciEdges setValue:raw forKey:kCIInputImageKey];
        NSNumber *inputintensity = @(100.0f);
        [ciEdges setValue:inputintensity forKey:kCIInputIntensityKey];
        CIImage *edgedImage = [ciEdges outputImage];
        CGRect exnent = [edgedImage extent];
        CGImageRef resultImage = [self.context createCGImage:edgedImage fromRect:exnent];
        result = [UIImage imageWithCGImage:resultImage];
        CGImageRelease(resultImage);
        return result;
    }
}

- (UIImage *)CIPhotoEffectTransferImageFromImage:(UIImage *)image
{
    @autoreleasepool {
        UIImage *result;
        CIImage *raw = [[CIImage alloc] initWithImage:image];
        
        CIFilter *ciEdges = [CIFilter filterWithName:@"CIPhotoEffectTransfer"];
        [ciEdges setValue:raw forKey:kCIInputImageKey];
        CIImage *edgedImage = [ciEdges outputImage];
        CGRect exnent = [edgedImage extent];
        CGImageRef resultImage = [self.context createCGImage:edgedImage fromRect:exnent];
        result = [UIImage imageWithCGImage:resultImage];
        CGImageRelease(resultImage);
        return result;
    }
}

- (UIImage *)CIPhotoEffectInstantImageFromImage:(UIImage *)image
{
    @autoreleasepool {
        UIImage *result;
        CIImage *raw = [[CIImage alloc] initWithImage:image];
        
        CIFilter *ciEdges = [CIFilter filterWithName:@"CIPhotoEffectInstant"];
        [ciEdges setValue:raw forKey:kCIInputImageKey];
        CIImage *edgedImage = [ciEdges outputImage];
        CGRect exnent = [edgedImage extent];
        CGImageRef resultImage = [self.context createCGImage:edgedImage fromRect:exnent];
        result = [UIImage imageWithCGImage:resultImage];
        CGImageRelease(resultImage);
        return result;
    }
}

- (CIFilter *)createMaskFilterWithFilteredImage:(UIImage *)image andOriginalImage:(UIImage *)orImage
{
    CIImage *raw = [[CIImage alloc] initWithImage:orImage];
    CIImage *filteredImage = [[CIImage alloc] initWithImage:image];
    CIFilter *filter = [CIFilter filterWithName:@"CIBlendWithMask"];
    [filter setValue:raw forKey:kCIInputBackgroundImageKey];
    [filter setValue:filteredImage forKey:kCIInputImageKey];
    return filter;
}

- (UIImage *)maskFilteredWithMask:(CIFilter *)mask intensity:(CGFloat)intensity andBackgroundImage:(UIImage *)image andFilteredImage:(UIImage *)filtered
{
    @autoreleasepool {
        UIImage *result;
        CIImage *maskImage = [[CIImage alloc] initWithImage:[PhotoEditorViewController imageFromColor:[UIColor.whiteColor colorWithAlphaComponent:intensity] withSize:self.image.size]];
        [mask setValue:maskImage forKey:kCIInputMaskImageKey];
        CIImage *maskedImage = [mask outputImage];
        CGRect exnent = [maskedImage extent];
        CGImageRef resultImage = [self.context createCGImage:maskedImage fromRect:exnent];
        result = [UIImage imageWithCGImage:resultImage];
        CGImageRelease(resultImage);
        return result;
    }
}

+ (UIImage *)imageFromColor:(UIColor *)color withSize:(CGSize)size
{
    CGRect rect = CGRectMake(0, 0, size.width, size.height);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}
@end
